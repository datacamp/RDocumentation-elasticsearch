input {
  jdbc {
    jdbc_driver_library => "/usr/share/logstash/jdbc/mysql-connector-java-5.1.40-bin.jar"
    last_run_metadata_path => "/usr/share/logstash/state/topics.state"
    jdbc_driver_class => "com.mysql.jdbc.Driver"
    jdbc_connection_string => "jdbc:${DB_URL}"
    jdbc_user => "${DB_USER}"
    jdbc_password => "${DB_PASSWORD}"
    jdbc_fetch_size => 1000
    statement => "select t.id as id, p.package_name as package_name, t.name, t.title, t.description, t.usage, t.details, t.value, t.references, t.note, t.author, t.seealso, t.examples, t.created_at, t.updated_at, t.package_version_id as version_id, t.sourceJSON as json from Topics t inner join PackageVersions p on p.id = t.package_version_id where t.updated_at > :sql_last_value;"
  }
}

filter {
  json {
    source => "json"
    target => "sourceJSON"
  }
  ruby {
    code => "
    event['arguments'] = event['sourceJSON'] && event['sourceJSON']['arguments'] || nil; 
    event['sections'] = event['sourceJSON'] && event['sourceJSON']['sections'] || [];
    event['sections'] = event['sections'].map { |x| 
      if x.instance_of? String
        return x
      elsif x.instance_of? Hash && x['contents']
        return x['contents']
      else
        return ''
      end
    }
    event['keywords'] = event['sourceJSON'] && event['sourceJSON']['keywords'] || nil; 
    event['aliases'] = event['sourceJSON'] && event['sourceJSON']['aliases' || nil];
    "
    remove_field => ["json"]
  }
}
output {
  #stdout { codec => json }
  elasticsearch {
    hosts => "${ES_HOST}"
    index => "rdoc"
    doc_as_upsert => true 
    document_type =>  "topic"
    document_id => "%{id}"
    routing => "%{package_name}"
    parent => "%{version_id}"
  }
}